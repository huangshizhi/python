# -*- coding: utf-8 -*-
"""
Created on Fri Sep  1 11:32:11 2017

@author: huangshizhi

http://scikit-learn.org/stable/auto_examples/linear_model/plot_logistic.html#sphx-glr-auto-examples-linear-model-plot-logistic-py
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn import linear_model



# this is our test set, it's just a straight line with some
# Gaussian noise
xmin, xmax = -5, 5
n_samples = 100
np.random.seed(0)
X = np.random.normal(size=n_samples)
y = (X > 0).astype(np.float)
X[X > 0] *= 4
X += .3 * np.random.normal(size=n_samples)

X = X[:, np.newaxis]
# run the classifier,使用LogisticRegression
clf = linear_model.LogisticRegression(C=1e5)
clf.fit(X, y)

# and plot the result
plt.figure(1, figsize=(4, 3))
plt.clf()
plt.scatter(X.ravel(), y, color='black', zorder=20)

'''
#测试模型参数结果
y_fit_model = X * clf.coef_ + clf.intercept_
a = clf.coef_
b = clf.intercept_
y_0 = a*X[0][0]+b
y_predict = clf.predict(X)

'''


def model(x):
    return 1 / (1 + np.exp(-x))
   
#按照模型求得的最后结果    
y_pred = model(X * clf.coef_ + clf.intercept_).ravel()

#y_predict = clf.predict(X)

X_test = np.linspace(-5, 10, 300)
loss = model(X_test * clf.coef_ + clf.intercept_).ravel()
plt.plot(X_test, loss, color='red', linewidth=3)



#对比使用LinearRegression
ols = linear_model.LinearRegression()
ols.fit(X, y)
plt.plot(X_test, ols.coef_ * X_test + ols.intercept_, linewidth=1)
plt.axhline(.5, color='.5')

plt.ylabel('y')
plt.xlabel('X')
plt.xticks(range(-5, 10))
plt.yticks([0, 0.5, 1])
plt.ylim(-.25, 1.25)
plt.xlim(-4, 10)
plt.legend(('Logistic Regression Model', 'Linear Regression Model'),
           loc="lower right", fontsize='small')
plt.show()
